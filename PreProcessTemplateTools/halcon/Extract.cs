//
// File generated by HDevelop for HALCON/.NET (C#) Version 19.11.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif




    //*手阅打分栏-框 分类错误图片 考号题号提取


    //stop ()
    //*KHlength  考号长度
    //*folderpath   图片地址
    //*saveTXT  是否要存储list  1为是

    public void get_errimg_KH_TH (HTuple hv_folderpath, HTuple hv_KHlength, HTuple hv_saveTXT, 
      out HTuple hv_KH_TH_List)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ImageFiles = new HTuple(), hv_KH_TH_All = new HTuple();
    HTuple hv_i = new HTuple(), hv_ImgPath = new HTuple();
    HTuple hv_ImgPath_S = new HTuple(), hv_ImgName = new HTuple();
    HTuple hv_ImgName_S = new HTuple(), hv_KH_TH = new HTuple();
    HTuple hv_Sorted = new HTuple(), hv_DeRplAll = new HTuple();
    HTuple hv_lastN = new HTuple(), hv_KHN = new HTuple();
    HTuple hv_KTList = new HTuple(), hv_KTCurrent = new HTuple();
    HTuple hv_kaohaoNum = new HTuple(), hv_KT = new HTuple();
    HTuple hv_Number = new HTuple(), hv_a = new HTuple(), hv_b = new HTuple();
    HTuple hv_KH = new HTuple(), hv_Number2 = new HTuple();
    HTuple hv_TH = new HTuple(), hv_filename = new HTuple();
    HTuple hv_FileHandle = new HTuple();
    HTuple   hv_KHlength_COPY_INP_TMP = new HTuple(hv_KHlength);

    // Initialize local and output iconic variables 
    hv_KH_TH_List = new HTuple();

    //*手阅打分栏-框 分类错误图片 考号题号提取


    //stop ()
    //*KHlength  考号长度
    //*folderpath   图片地址
    //*saveTXT  是否要存储list  1为是


    {
    HTuple 
      ExpTmpLocalVar_KHlength = new HTuple(hv_KHlength_COPY_INP_TMP);
    hv_KHlength_COPY_INP_TMP.Dispose();
    hv_KHlength_COPY_INP_TMP = ExpTmpLocalVar_KHlength;
    }
    //Image Acquisition 01: Code generated by Image Acquisition 01
    hv_ImageFiles.Dispose();
    HOperatorSet.ListFiles(hv_folderpath, ((new HTuple("files")).TupleConcat("follow_links")).TupleConcat(
        "recursive"), out hv_ImageFiles);

    {
    HTuple ExpTmpOutVar_0;
    HOperatorSet.TupleRegexpSelect(hv_ImageFiles, (new HTuple("\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$")).TupleConcat(
        "ignore_case"), out ExpTmpOutVar_0);
    hv_ImageFiles.Dispose();
    hv_ImageFiles = ExpTmpOutVar_0;
    }

    //aa := 1
    hv_KH_TH_All.Dispose();
    hv_KH_TH_All = new HTuple();

    for (hv_i=0; (int)hv_i<=(int)((new HTuple(hv_ImageFiles.TupleLength()))-1); hv_i = (int)hv_i + 1)
    {

      hv_ImgPath.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImgPath = hv_ImageFiles.TupleSelect(
          hv_i);
      }
      hv_ImgPath_S.Dispose();
      HOperatorSet.TupleSplit(hv_ImgPath, "\\", out hv_ImgPath_S);
      hv_ImgName.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImgName = hv_ImgPath_S.TupleSelect(
          (new HTuple(hv_ImgPath_S.TupleLength()))-1);
      }
      hv_ImgName_S.Dispose();
      HOperatorSet.TupleSplit(hv_ImgName, "-", out hv_ImgName_S);
      hv_KH_TH.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_KH_TH = hv_ImgName_S.TupleSelect(
          1);
      }

      if (hv_KH_TH_All == null)
        hv_KH_TH_All = new HTuple();
      hv_KH_TH_All[new HTuple(hv_KH_TH_All.TupleLength())] = hv_KH_TH;

    }
    //*paixu
    hv_Sorted.Dispose();
    HOperatorSet.TupleSort(hv_KH_TH_All, out hv_Sorted);

    if ((int)(new HTuple((new HTuple(hv_Sorted.TupleLength())).TupleGreater(0))) != 0)
    {
      hv_DeRplAll.Dispose();
      hv_DeRplAll = new HTuple();
      if (hv_DeRplAll == null)
        hv_DeRplAll = new HTuple();
      hv_DeRplAll[0] = hv_Sorted.TupleSelect(0);

      //*quchong
      for (hv_i=0; (int)hv_i<=(int)((new HTuple(hv_Sorted.TupleLength()))-1); hv_i = (int)hv_i + 1)
      {
        hv_lastN.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_lastN = hv_DeRplAll.TupleSelect(
            (new HTuple(hv_DeRplAll.TupleLength()))-1);
        }
        if ((int)(new HTuple(((hv_Sorted.TupleSelect(hv_i))).TupleEqual(hv_lastN))) != 0)
        {
          continue;
        }
        else
        {
          if (hv_DeRplAll == null)
            hv_DeRplAll = new HTuple();
          hv_DeRplAll[new HTuple(hv_DeRplAll.TupleLength())] = hv_Sorted.TupleSelect(
              hv_i);
        }

      }

      //stop ()

      //*获取考号与题号
      hv_KHN.Dispose();
      hv_KHN = 0;

      hv_KTList.Dispose();
      hv_KTList = new HTuple();
      hv_KTCurrent.Dispose();
      hv_KTCurrent = "";

      hv_kaohaoNum.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_kaohaoNum = (new HTuple(10)).TuplePow(
          hv_KHlength_COPY_INP_TMP);
      }

      for (hv_i=0; (int)hv_i<=(int)((new HTuple(hv_DeRplAll.TupleLength()))-1); hv_i = (int)hv_i + 1)
      {
        hv_KT.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_KT = hv_DeRplAll.TupleSelect(
            hv_i);
        }
        hv_Number.Dispose();
        HOperatorSet.TupleNumber(hv_KT, out hv_Number);

        hv_a.Dispose();
        hv_a = 1;
        while ((int)(new HTuple(hv_Number.TupleGreater(hv_kaohaoNum))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_a = hv_a*10;
          hv_a.Dispose();
          hv_a = ExpTmpLocalVar_a;
          }
          }
          hv_b.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_b = hv_Number/10;
          }
          hv_Number.Dispose();
          hv_Number = new HTuple(hv_b);
        }
        hv_KH.Dispose();
        hv_KH = new HTuple(hv_Number);
        hv_Number2.Dispose();
        HOperatorSet.TupleNumber(hv_KT, out hv_Number2);
        hv_TH.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TH = hv_Number2-(hv_KH*hv_a);
        }

        //*判断和上一个考号是否相同，若相同则字符串后面加题号，若不同则一个学生完成更换考号和题号
        if ((int)(new HTuple(hv_KHN.TupleEqual(hv_KH))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_KTCurrent = (hv_KTCurrent+new HTuple(", "))+hv_TH;
          hv_KTCurrent.Dispose();
          hv_KTCurrent = ExpTmpLocalVar_KTCurrent;
          }
          }
        }
        else
        {
          if ((int)(new HTuple(hv_KHN.TupleEqual(0))) != 0)
          {
            hv_KHN.Dispose();
            hv_KHN = new HTuple(hv_KH);
            hv_KTCurrent.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_KTCurrent = (hv_KH+" : ")+hv_TH;
            }
          }
          else
          {
            if (hv_KTList == null)
              hv_KTList = new HTuple();
            hv_KTList[new HTuple(hv_KTList.TupleLength())] = hv_KTCurrent;
            hv_KHN.Dispose();
            hv_KHN = new HTuple(hv_KH);
            hv_KTCurrent.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_KTCurrent = (hv_KH+" : ")+hv_TH;
            }
          }
        }

      }


      //stop ()

      hv_KH_TH_List.Dispose();
      hv_KH_TH_List = new HTuple(hv_KTList);

      if ((int)(new HTuple(hv_saveTXT.TupleEqual(1))) != 0)
      {
        hv_filename.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_filename = (hv_folderpath+"\\")+"KH-TH-list.txt";
        }
        hv_FileHandle.Dispose();
        HOperatorSet.OpenFile(hv_filename, "append", out hv_FileHandle);
        for (hv_i=0; (int)hv_i<=(int)((new HTuple(hv_KH_TH_List.TupleLength()))-1); hv_i = (int)hv_i + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.FwriteString(hv_FileHandle, hv_KH_TH_List.TupleSelect(hv_i));
          }
          HOperatorSet.FnewLine(hv_FileHandle);
        }
        HOperatorSet.CloseFile(hv_FileHandle);

        //stop ()
      }

    }
    else
    {
      hv_KH_TH_List.Dispose();
      hv_KH_TH_List = new HTuple();
      if ((int)(new HTuple(hv_saveTXT.TupleEqual(1))) != 0)
      {
        hv_filename.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_filename = (hv_folderpath+"\\")+"KH-TH-list.txt";
        }
        hv_FileHandle.Dispose();
        HOperatorSet.OpenFile(hv_filename, "append", out hv_FileHandle);
        HOperatorSet.FwriteString(hv_FileHandle, "列表为空！");
        HOperatorSet.CloseFile(hv_FileHandle);
        //stop ()
      }

    }









    hv_KHlength_COPY_INP_TMP.Dispose();
    hv_ImageFiles.Dispose();
    hv_KH_TH_All.Dispose();
    hv_i.Dispose();
    hv_ImgPath.Dispose();
    hv_ImgPath_S.Dispose();
    hv_ImgName.Dispose();
    hv_ImgName_S.Dispose();
    hv_KH_TH.Dispose();
    hv_Sorted.Dispose();
    hv_DeRplAll.Dispose();
    hv_lastN.Dispose();
    hv_KHN.Dispose();
    hv_KTList.Dispose();
    hv_KTCurrent.Dispose();
    hv_kaohaoNum.Dispose();
    hv_KT.Dispose();
    hv_Number.Dispose();
    hv_a.Dispose();
    hv_b.Dispose();
    hv_KH.Dispose();
    hv_Number2.Dispose();
    hv_TH.Dispose();
    hv_filename.Dispose();
    hv_FileHandle.Dispose();

    return;
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_WindowHandle1 = new HTuple(), hv_KHlength = new HTuple();
    HTuple hv_folderpath = new HTuple(), hv_saveTXT = new HTuple();
    HTuple hv_KH_TH_List = new HTuple();
    // Initialize local and output iconic variables 

    HOperatorSet.SetWindowAttr("background_color","black");
    HOperatorSet.OpenWindow(0,0,512,512,0,"visible","",out hv_WindowHandle1);
    HDevWindowStack.Push(hv_WindowHandle1);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
    }

    hv_KHlength.Dispose();
    hv_KHlength = 6;
    hv_folderpath.Dispose();
    hv_folderpath = "错误判断";
    //folderpath := '111'
    //*是否要存储list
    hv_saveTXT.Dispose();
    hv_saveTXT = 1;
    //*手阅打分栏-框 分类错误图片 考号题号提取
    hv_KH_TH_List.Dispose();
    get_errimg_KH_TH(hv_folderpath, hv_KHlength, hv_saveTXT, out hv_KH_TH_List);


    //stop ()
    //na1 := KH_TH_All_de[0]



    // stop(...); only in hdevelop







    hv_WindowHandle1.Dispose();
    hv_KHlength.Dispose();
    hv_folderpath.Dispose();
    hv_saveTXT.Dispose();
    hv_KH_TH_List.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif


//
// File generated by HDevelop for HALCON/.NET (C#) Version 20.11.1.2
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  // Procedures 
  public void Enhance_Template_Image (HObject ho_Image, out HObject ho_ImageScaled, 
      HTuple hv_chose, HTuple hv_a, HTuple hv_b, out HTuple hv_MeanB2, out HTuple hv_MeanT, 
      out HTuple hv_MeanW, out HTuple hv_res)
  {




    // Local iconic variables 

    HObject ho_GrayImageT, ho_ROI_0=null, ho_ImageReducedT=null;
    HObject ho_RegionB=null, ho_RegionB1=null, ho_ImageReducedT1=null;
    HObject ho_RegionB2=null, ho_ImageReducedT12=null, ho_RegionW=null;
    HObject ho_ImageReducedW=null, ho_RegionW1=null, ho_ImageReducedW2=null;
    HObject ho_Region=null, ho_RegionOpening1=null, ho_Rectangle=null;
    HObject ho_RegionDifference=null, ho_Image1=null, ho_Image2=null;
    HObject ho_Image3=null, ho_Region1=null, ho_Region2=null;
    HObject ho_Region3=null;

    // Local control variables 

    HTuple hv_lenthT = new HTuple(), hv_Width_T = new HTuple();
    HTuple hv_Height_T = new HTuple(), hv_DeviationT = new HTuple();
    HTuple hv_MeanB = new HTuple(), hv_DeviationB = new HTuple();
    HTuple hv_DeviationB2 = new HTuple(), hv_MeanB3 = new HTuple();
    HTuple hv_DeviationB3 = new HTuple(), hv_DeviationW = new HTuple();
    HTuple hv_MeanW2 = new HTuple(), hv_DeviationW2 = new HTuple();
    HTuple hv_min1 = new HTuple(), hv_max1 = new HTuple();
    HTuple hv_mutil = new HTuple(), hv_M1 = new HTuple(), hv_M2 = new HTuple();
    HTuple hv_add = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_Channels = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageScaled);
    HOperatorSet.GenEmptyObj(out ho_GrayImageT);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_ImageReducedT);
    HOperatorSet.GenEmptyObj(out ho_RegionB);
    HOperatorSet.GenEmptyObj(out ho_RegionB1);
    HOperatorSet.GenEmptyObj(out ho_ImageReducedT1);
    HOperatorSet.GenEmptyObj(out ho_RegionB2);
    HOperatorSet.GenEmptyObj(out ho_ImageReducedT12);
    HOperatorSet.GenEmptyObj(out ho_RegionW);
    HOperatorSet.GenEmptyObj(out ho_ImageReducedW);
    HOperatorSet.GenEmptyObj(out ho_RegionW1);
    HOperatorSet.GenEmptyObj(out ho_ImageReducedW2);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    HOperatorSet.GenEmptyObj(out ho_Image1);
    HOperatorSet.GenEmptyObj(out ho_Image2);
    HOperatorSet.GenEmptyObj(out ho_Image3);
    HOperatorSet.GenEmptyObj(out ho_Region1);
    HOperatorSet.GenEmptyObj(out ho_Region2);
    HOperatorSet.GenEmptyObj(out ho_Region3);
    hv_MeanB2 = new HTuple();
    hv_MeanT = new HTuple();
    hv_MeanW = new HTuple();
    hv_res = new HTuple();

    //stop ()
    hv_lenthT.Dispose();
    hv_lenthT = 30;
    //**预处理图片
    ho_GrayImageT.Dispose();
    HOperatorSet.Rgb1ToGray(ho_Image, out ho_GrayImageT);
    hv_Width_T.Dispose();hv_Height_T.Dispose();
    HOperatorSet.GetImageSize(ho_Image, out hv_Width_T, out hv_Height_T);

    if ((int)((new HTuple(hv_Width_T.TupleGreater(hv_lenthT))).TupleAnd(new HTuple(hv_Height_T.TupleGreater(
        hv_lenthT)))) != 0)
    {
      if ((int)((new HTuple(hv_Width_T.TupleLess(2*hv_lenthT))).TupleOr(new HTuple(hv_Height_T.TupleLess(
          2*hv_lenthT)))) != 0)
      {
        hv_lenthT.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_lenthT = (((hv_Width_T.TupleConcat(
            hv_Height_T))).TupleMin())/4;
        }
      }


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ROI_0.Dispose();
      HOperatorSet.GenRectangle1(out ho_ROI_0, hv_lenthT, hv_lenthT, hv_Height_T-hv_lenthT, 
          hv_Width_T-hv_lenthT);
      }

      ho_ImageReducedT.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImageT, ho_ROI_0, out ho_ImageReducedT);
      hv_MeanT.Dispose();hv_DeviationT.Dispose();
      HOperatorSet.Intensity(ho_ROI_0, ho_GrayImageT, out hv_MeanT, out hv_DeviationT);
      //*     if (MeanT>230)

      //*获取字体灰度值
      ho_RegionB.Dispose();
      HOperatorSet.Threshold(ho_ImageReducedT, out ho_RegionB, 0, hv_MeanT);
      ho_ImageReducedT.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImageT, ho_RegionB, out ho_ImageReducedT);
      hv_MeanB.Dispose();hv_DeviationB.Dispose();
      HOperatorSet.Intensity(ho_RegionB, ho_ImageReducedT, out hv_MeanB, out hv_DeviationB);

      ho_RegionB1.Dispose();
      HOperatorSet.Threshold(ho_ImageReducedT, out ho_RegionB1, 0, hv_MeanB);
      ho_ImageReducedT1.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImageT, ho_RegionB1, out ho_ImageReducedT1
          );
      hv_MeanB2.Dispose();hv_DeviationB2.Dispose();
      HOperatorSet.Intensity(ho_RegionB1, ho_ImageReducedT1, out hv_MeanB2, out hv_DeviationB2);

      ho_RegionB2.Dispose();
      HOperatorSet.Threshold(ho_ImageReducedT, out ho_RegionB2, 0, hv_MeanB2);
      ho_ImageReducedT12.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImageT, ho_RegionB2, out ho_ImageReducedT12
          );
      hv_MeanB3.Dispose();hv_DeviationB3.Dispose();
      HOperatorSet.Intensity(ho_RegionB2, ho_ImageReducedT12, out hv_MeanB3, out hv_DeviationB3);


      //*获取背景灰度值
      ho_RegionW.Dispose();
      HOperatorSet.Threshold(ho_GrayImageT, out ho_RegionW, hv_MeanT, 255);
      ho_ImageReducedW.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImageT, ho_RegionW, out ho_ImageReducedW);
      hv_MeanW.Dispose();hv_DeviationW.Dispose();
      HOperatorSet.Intensity(ho_RegionW, ho_ImageReducedW, out hv_MeanW, out hv_DeviationW);

      ho_RegionW1.Dispose();
      HOperatorSet.Threshold(ho_GrayImageT, out ho_RegionW1, hv_MeanW, 255);
      ho_ImageReducedW2.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImageT, ho_RegionW1, out ho_ImageReducedW2
          );
      hv_MeanW2.Dispose();hv_DeviationW2.Dispose();
      HOperatorSet.Intensity(ho_RegionW1, ho_ImageReducedW2, out hv_MeanW2, out hv_DeviationW2);


      //min1 := MeanB2+DeviationB2
      //max1 := MeanW-2*DeviationW

      if ((int)((new HTuple(hv_a.TupleEqual(0))).TupleAnd(new HTuple(hv_b.TupleEqual(
          0)))) != 0)
      {


        if ((int)((new HTuple(hv_MeanB3.TupleGreater(45))).TupleOr(new HTuple(hv_MeanW2.TupleLess(
            249)))) != 0)
        {
          //chose := 1
          //DeviationW2 := 15
          if ((int)(new HTuple(hv_chose.TupleEqual(1))) != 0)
          {
            hv_min1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_min1 = hv_MeanB2+hv_DeviationB2;
            }
            hv_max1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_max1 = hv_MeanW2+hv_DeviationW2;
            }
          }
          else if ((int)(new HTuple(hv_chose.TupleEqual(2))) != 0)
          {
            hv_min1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_min1 = hv_MeanB2+hv_DeviationB2;
            }
            hv_max1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_max1 = hv_MeanW-(2*hv_DeviationW);
            }
          }
          else if ((int)(new HTuple(hv_chose.TupleEqual(3))) != 0)
          {
            hv_min1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_min1 = hv_MeanB2-hv_DeviationB2;
            }
            hv_max1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_max1 = hv_MeanW2+hv_DeviationW2;
            }
          }
          else if ((int)(new HTuple(hv_chose.TupleEqual(4))) != 0)
          {
            hv_min1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_min1 = hv_MeanB2-hv_DeviationB2;
            }
            hv_max1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_max1 = hv_MeanW2-hv_DeviationW2;
            }
          }



          if ((int)(new HTuple(((hv_max1-hv_min1)).TupleGreater(10))) != 0)
          {

            hv_mutil.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_mutil = 255/(hv_max1-hv_min1);
            }
            hv_M1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_M1 = hv_min1*hv_mutil;
            }
            hv_M2.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_M2 = hv_max1*hv_mutil;
            }
            hv_add.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_add = -hv_M1;
            }
          }
          else if ((int)(new HTuple(hv_max1.TupleLessEqual(hv_min1))) != 0)
          {

            hv_min1.Dispose();
            hv_min1 = 5;
            hv_max1.Dispose();
            hv_max1 = 250;
            hv_mutil.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_mutil = 255/(hv_max1-hv_min1);
            }
            hv_M1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_M1 = hv_min1*hv_mutil;
            }
            hv_M2.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_M2 = hv_max1*hv_mutil;
            }
            hv_add.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_add = -hv_M1;
            }
          }
          else
          {

            hv_min1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_min1 = hv_max1-10;
            }
            {
            HTuple 
              ExpTmpLocalVar_max1 = new HTuple(hv_max1);
            hv_max1.Dispose();
            hv_max1 = ExpTmpLocalVar_max1;
            }
            hv_mutil.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_mutil = 255/(hv_max1-hv_min1);
            }
            hv_M1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_M1 = hv_min1*hv_mutil;
            }
            hv_M2.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_M2 = hv_max1*hv_mutil;
            }
            hv_add.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_add = -hv_M1;
            }

          }


          ho_ImageScaled.Dispose();
          HOperatorSet.ScaleImage(ho_Image, out ho_ImageScaled, hv_mutil, hv_add);
          ho_Region.Dispose();
          HOperatorSet.Threshold(ho_ImageScaled, out ho_Region, 0, 220);
          ho_RegionOpening1.Dispose();
          HOperatorSet.OpeningCircle(ho_Region, out ho_RegionOpening1, 1);

          hv_Width.Dispose();hv_Height.Dispose();
          HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_Rectangle.Dispose();
          HOperatorSet.GenRectangle1(out ho_Rectangle, 0, 0, hv_Height-1, hv_Width-1);
          }


          ho_RegionDifference.Dispose();
          HOperatorSet.Difference(ho_Rectangle, ho_RegionOpening1, out ho_RegionDifference
              );
          //stop ()
          hv_Channels.Dispose();
          HOperatorSet.CountChannels(ho_ImageScaled, out hv_Channels);

          if ((int)(new HTuple(hv_Channels.TupleEqual(3))) != 0)
          {
            ho_Image1.Dispose();ho_Image2.Dispose();ho_Image3.Dispose();
            HOperatorSet.Decompose3(ho_ImageScaled, out ho_Image1, out ho_Image2, 
                out ho_Image3);

            HOperatorSet.OverpaintRegion(ho_Image1, ho_RegionDifference, 250, "fill");
            HOperatorSet.OverpaintRegion(ho_Image2, ho_RegionDifference, 250, "fill");
            HOperatorSet.OverpaintRegion(ho_Image3, ho_RegionDifference, 250, "fill");

            ho_ImageScaled.Dispose();
            HOperatorSet.Compose3(ho_Image1, ho_Image2, ho_Image3, out ho_ImageScaled
                );
          }
          else if ((int)(new HTuple(hv_Channels.TupleEqual(1))) != 0)
          {
            HOperatorSet.OverpaintRegion(ho_ImageScaled, ho_RegionDifference, 250, 
                "fill");
          }

          {
          HObject 
            ExpTmpLocalVar_ImageScaled = new HObject(ho_ImageScaled);
          ho_ImageScaled.Dispose();
          ho_ImageScaled = ExpTmpLocalVar_ImageScaled;
          }

        }
        else
        {
          ho_ImageScaled.Dispose();
          ho_ImageScaled = new HObject(ho_Image);
        }

        hv_res.Dispose();
        hv_res = "ok";

      }
      else
      {

        hv_min1.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_min1 = hv_MeanB2+hv_a;
        }
        hv_max1.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_max1 = hv_MeanW-hv_b;
        }

        if ((int)(new HTuple(hv_min1.TupleGreaterEqual(hv_max1))) != 0)
        {
          hv_res.Dispose();
          hv_res = new HTuple("MeanB2+a >= MeanW-b, 减小a值，或者增大b值");
          ho_GrayImageT.Dispose();
          ho_ROI_0.Dispose();
          ho_ImageReducedT.Dispose();
          ho_RegionB.Dispose();
          ho_RegionB1.Dispose();
          ho_ImageReducedT1.Dispose();
          ho_RegionB2.Dispose();
          ho_ImageReducedT12.Dispose();
          ho_RegionW.Dispose();
          ho_ImageReducedW.Dispose();
          ho_RegionW1.Dispose();
          ho_ImageReducedW2.Dispose();
          ho_Region.Dispose();
          ho_RegionOpening1.Dispose();
          ho_Rectangle.Dispose();
          ho_RegionDifference.Dispose();
          ho_Image1.Dispose();
          ho_Image2.Dispose();
          ho_Image3.Dispose();
          ho_Region1.Dispose();
          ho_Region2.Dispose();
          ho_Region3.Dispose();

          hv_lenthT.Dispose();
          hv_Width_T.Dispose();
          hv_Height_T.Dispose();
          hv_DeviationT.Dispose();
          hv_MeanB.Dispose();
          hv_DeviationB.Dispose();
          hv_DeviationB2.Dispose();
          hv_MeanB3.Dispose();
          hv_DeviationB3.Dispose();
          hv_DeviationW.Dispose();
          hv_MeanW2.Dispose();
          hv_DeviationW2.Dispose();
          hv_min1.Dispose();
          hv_max1.Dispose();
          hv_mutil.Dispose();
          hv_M1.Dispose();
          hv_M2.Dispose();
          hv_add.Dispose();
          hv_Width.Dispose();
          hv_Height.Dispose();
          hv_Channels.Dispose();

          return;
        }
        else
        {
          hv_mutil.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_mutil = 255/(hv_max1-hv_min1);
          }
          hv_M1.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_M1 = hv_min1*hv_mutil;
          }
          hv_M2.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_M2 = hv_max1*hv_mutil;
          }
          hv_add.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_add = -hv_M1;
          }

          ho_ImageScaled.Dispose();
          HOperatorSet.ScaleImage(ho_Image, out ho_ImageScaled, hv_mutil, hv_add);
          ho_Region.Dispose();
          HOperatorSet.Threshold(ho_ImageScaled, out ho_Region, 0, 220);
          ho_RegionOpening1.Dispose();
          HOperatorSet.OpeningCircle(ho_Region, out ho_RegionOpening1, 1);

          hv_Width.Dispose();hv_Height.Dispose();
          HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_Rectangle.Dispose();
          HOperatorSet.GenRectangle1(out ho_Rectangle, 0, 0, hv_Height-1, hv_Width-1);
          }


          ho_RegionDifference.Dispose();
          HOperatorSet.Difference(ho_Rectangle, ho_RegionOpening1, out ho_RegionDifference
              );
          //stop ()
          hv_Channels.Dispose();
          HOperatorSet.CountChannels(ho_ImageScaled, out hv_Channels);

          if ((int)(new HTuple(hv_Channels.TupleEqual(3))) != 0)
          {
            ho_Image1.Dispose();ho_Image2.Dispose();ho_Image3.Dispose();
            HOperatorSet.Decompose3(ho_ImageScaled, out ho_Image1, out ho_Image2, 
                out ho_Image3);

            HOperatorSet.OverpaintRegion(ho_Image1, ho_RegionDifference, 250, "fill");
            HOperatorSet.OverpaintRegion(ho_Image2, ho_RegionDifference, 250, "fill");
            HOperatorSet.OverpaintRegion(ho_Image3, ho_RegionDifference, 250, "fill");

            ho_ImageScaled.Dispose();
            HOperatorSet.Compose3(ho_Image1, ho_Image2, ho_Image3, out ho_ImageScaled
                );
          }
          else if ((int)(new HTuple(hv_Channels.TupleEqual(1))) != 0)
          {
            HOperatorSet.OverpaintRegion(ho_ImageScaled, ho_RegionDifference, 250, 
                "fill");
          }

          {
          HObject 
            ExpTmpLocalVar_ImageScaled = new HObject(ho_ImageScaled);
          ho_ImageScaled.Dispose();
          ho_ImageScaled = ExpTmpLocalVar_ImageScaled;
          }


          hv_res.Dispose();
          hv_res = "ok";

        }

      }




      hv_Channels.Dispose();
      HOperatorSet.CountChannels(ho_ImageScaled, out hv_Channels);

      if ((int)(new HTuple(hv_Channels.TupleEqual(3))) != 0)
      {
        ho_Image1.Dispose();ho_Image2.Dispose();ho_Image3.Dispose();
        HOperatorSet.Decompose3(ho_ImageScaled, out ho_Image1, out ho_Image2, out ho_Image3
            );
        ho_Region1.Dispose();
        HOperatorSet.Threshold(ho_Image1, out ho_Region1, 0, 2);
        HOperatorSet.OverpaintRegion(ho_Image1, ho_Region1, 3, "fill");
        ho_Region1.Dispose();
        HOperatorSet.Threshold(ho_Image1, out ho_Region1, 254, 255);
        HOperatorSet.OverpaintRegion(ho_Image1, ho_Region1, 253, "fill");

        ho_Region2.Dispose();
        HOperatorSet.Threshold(ho_Image2, out ho_Region2, 0, 2);
        HOperatorSet.OverpaintRegion(ho_Image2, ho_Region2, 3, "fill");
        ho_Region2.Dispose();
        HOperatorSet.Threshold(ho_Image2, out ho_Region2, 254, 255);
        HOperatorSet.OverpaintRegion(ho_Image2, ho_Region2, 253, "fill");

        ho_Region3.Dispose();
        HOperatorSet.Threshold(ho_Image3, out ho_Region3, 0, 2);
        HOperatorSet.OverpaintRegion(ho_Image3, ho_Region3, 3, "fill");
        ho_Region3.Dispose();
        HOperatorSet.Threshold(ho_Image3, out ho_Region3, 254, 255);
        HOperatorSet.OverpaintRegion(ho_Image3, ho_Region3, 253, "fill");

        ho_ImageScaled.Dispose();
        HOperatorSet.Compose3(ho_Image1, ho_Image2, ho_Image3, out ho_ImageScaled
            );


      }
      else if ((int)(new HTuple(hv_Channels.TupleEqual(1))) != 0)
      {

        ho_Region1.Dispose();
        HOperatorSet.Threshold(ho_ImageScaled, out ho_Region1, 0, 2);
        HOperatorSet.OverpaintRegion(ho_ImageScaled, ho_Region1, 3, "fill");
        ho_Region1.Dispose();
        HOperatorSet.Threshold(ho_ImageScaled, out ho_Region1, 254, 255);
        HOperatorSet.OverpaintRegion(ho_ImageScaled, ho_Region1, 253, "fill");


      }

      //stop ()
    }
    ho_GrayImageT.Dispose();
    ho_ROI_0.Dispose();
    ho_ImageReducedT.Dispose();
    ho_RegionB.Dispose();
    ho_RegionB1.Dispose();
    ho_ImageReducedT1.Dispose();
    ho_RegionB2.Dispose();
    ho_ImageReducedT12.Dispose();
    ho_RegionW.Dispose();
    ho_ImageReducedW.Dispose();
    ho_RegionW1.Dispose();
    ho_ImageReducedW2.Dispose();
    ho_Region.Dispose();
    ho_RegionOpening1.Dispose();
    ho_Rectangle.Dispose();
    ho_RegionDifference.Dispose();
    ho_Image1.Dispose();
    ho_Image2.Dispose();
    ho_Image3.Dispose();
    ho_Region1.Dispose();
    ho_Region2.Dispose();
    ho_Region3.Dispose();

    hv_lenthT.Dispose();
    hv_Width_T.Dispose();
    hv_Height_T.Dispose();
    hv_DeviationT.Dispose();
    hv_MeanB.Dispose();
    hv_DeviationB.Dispose();
    hv_DeviationB2.Dispose();
    hv_MeanB3.Dispose();
    hv_DeviationB3.Dispose();
    hv_DeviationW.Dispose();
    hv_MeanW2.Dispose();
    hv_DeviationW2.Dispose();
    hv_min1.Dispose();
    hv_max1.Dispose();
    hv_mutil.Dispose();
    hv_M1.Dispose();
    hv_M2.Dispose();
    hv_add.Dispose();
    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_Channels.Dispose();

    return;

  }


}

